service: booking-api

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-north-1'}
  apiName: booking-api-axile
  
  environment:
    BOOKINGS_TABLE: hotel-bookings-axile
  
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOKINGS_TABLE}"

functions:
  createBooking:
    handler: functions/CreateBooking/handler.handler
    events:
      - http:
          path: /bookings
          method: post
          cors: true

  getAllBookings:
    handler: functions/GetAllBookings/handler.handler
    events:
      - http:
          path: /bookings
          method: get
          cors: true

  getSingleBooking:
    handler: functions/GetSingleBooking/handler.handler
    events:
      - http:
          path: /bookings/{bookingId}
          method: get
          cors: true

  updateBooking:
    handler: functions/UpdateBooking/handler.handler
    events:
      - http:
          path: /bookings/{bookingId}
          method: put
          cors: true

  deleteBooking:
    handler: functions/DeleteBooking/handler.handler
    events:
      - http:
          path: /bookings/{bookingId}
          method: delete
          cors: true

resources:
  Resources:
    BookingsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: hotel-bookings-axile
        AttributeDefinitions:
          - AttributeName: bookingId
            AttributeType: S
        KeySchema:
          - AttributeName: bookingId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

plugins:
  - serverless-offline
  